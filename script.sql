CREATE TABLE WORKER (
    ID UUID PRIMARY KEY,
    FIO VARCHAR(100) NOT NULL,
    TASKS UUID[] DEFAULT '{}'
);
CREATE TABLE REQUESTS (
    ID UUID PRIMARY KEY,
    DATE_START DATE NOT NULL,
    DATE_END DATE NOT NULL CHECK(DATE_END >= DATE_START),
    EQUIPMENT_ID UUID REFERENCES EQUIPMENT,
    WORKER_ID UUID REFERENCES WORKER
);
CREATE TABLE EQUIPMENT (
    ID UUID PRIMARY KEY,
    TITLE VARCHAR(100) NOT NULL,
    AVAILABLE INTEGER NOT NULL CHECK(AVAILABLE >= 0),
);

-- User(actions: SELECT, INSERT, UPDATE, DELETE)
CREATE ROLE user_admin LOGIN ENCRYPTED PASSWORD 'admin';
GRANT SELECT, INSERT, UPDATE, DELETE ON EQUIPMENT, REQUESTS, WORKER TO user_admin;


-- SQL SCRIPTS
SELECT * FROM WORKERS ORDER BY FIO;
SELECT * FROM REQUESTS ORDER BY DATE_START;

-- create request
INSERT INTO REQUEST(ID, DATE_START, DATE_END, EQUIPMENT_ID) VALUES ($1,$2,#3,$4);
--

INSERT INTO WORKERS (FIO) VALUES ($1);
DELETE FROM WORKERS WHERE ID = $1;
UPDATE WORKERS SET FIO = $1 WHERE ID = $2;

UPDATE WORKER SET TASKS = ARRAY_APPEND(TASKS, $1) WHERE ID = $2;
UPDATE REQUESTS SET WORKER_ID= $2 WHERE ID =$1;

UPDATE WORKER SET TASKS = ARRAY_REMOVE(TASKS, $1) WHERE ID = $2;
UPDATE REQUESTS SET WORKER_ID=NULL WHERE ID =$1;


-- перевод заявки с одного сотрудника на другого
UPDATE WORKER SET TASKS = ARRAY_REMOVE(TASKS, $1) WHERE ID = $2;
UPDATE WORKER SET TASKS = ARRAY_APPEND(TASKS, $1) WHERE ID = $3;

-- UPDATE REQUEST PARAMETERS
UPDATE REQUESTS SET DATE_START = $1, DATE_END=$2, EQUIPMENT_ID=$3, WORKER_ID=$4  WHERE ID = $5;
